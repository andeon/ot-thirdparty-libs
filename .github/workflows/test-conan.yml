name: Build with Conan and CMake

on:
  workflow_dispatch:  # Permite disparar o workflow manualmente

jobs:
  build:
    runs-on: windows-2019

    steps:
      # 1. Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Instalar o Conan
      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      # 3. Criar perfil do Conan (comando 'detect' pode ser usado se necessário)
      - name: Create Conan profile
        run: |
          conan profile new default --detect
          conan profile update settings.compiler="Visual Studio" default
          conan profile update settings.compiler.version=16 default
          conan profile update settings.compiler.runtime=MD default
          conan profile update settings.build_type=Release default
          conan profile update settings.arch=x86_64 default

      # 4. Instalar dependências do Conan
      - name: Install dependencies with Conan
        run: |
          conan install . --build=missing

      # 5. Gerar arquivos CMake com Conan
      - name: Generate CMake files with Conan
        run: |
          conan install . --build=missing -s compiler="Visual Studio" -s compiler.version=16 -s compiler.runtime=MD -s build_type=Release -s arch=x86_64 --generator=cmake

      # 6. Rodar CMake para configurar o projeto
      - name: Configure project with CMake
        run: |
          cmake . -G "Visual Studio 16 2019" -A x64

      # 7. Construir o projeto com CMake
      - name: Build project with CMake
        run: |
          cmake --build . --config Release

      # 8. (Opcional) Upload dos artefatos gerados
      - name: Upload static libs
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/